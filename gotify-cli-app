#!/usr/bin/env python3
import sys
import os.path
import yaml
import argparse
import fileinput
from urllib.parse import urljoin
import requests

APP_NAME = 'gotify-cli-app'
CONFIG_NAME = 'gotify'

def main():
    # Argument declaration
    parser = argparse.ArgumentParser(description='Gotify cli')
    group = parser.add_mutually_exclusive_group()
    parser.add_argument('-c', '--config', help='file path of a yaml config file')
    group.add_argument('-a', '--app-token', help='gotify app token to which to send the notification')
    group.add_argument('-k', '--key', help='lookup token from key in the config file')
    parser.add_argument('-t', '--title', help='the title of the notification')
    parser.add_argument('-m', '--message', help='the message of the notification (\'-\' to read from stdin)')
    parser.add_argument('-p', '--priority', type=int, help='the priority of the notification')
    args = parser.parse_args()

    # Load config
    if args.config:
        # Load config from path provided as argument
        config = loadConfig(args.config)
    else:
        # Load config file from predefined locations
        config = loadDefaultConfig();

    # Load args into variables
    url = config['url']

    # Load app token (either from map, from argument, or default from config)
    if args.key:
        token = loadTokenFromKey(config, args.key)
    else:
        if args.app_token:
            token = args.app_token
        else:
            token = config['default']['token']

    # Load title (either from argument, or default from config)
    if args.title:
        title = args.title
    else:
        title = config['default']['title']

    # Load message (either from argument, from stdin, or default from config)
    if args.message:
        message = args.message
        if message is '-':
            message = sys.stdin.buffer.read()
    else:
        message = config['default']['message']

    # Load priority (either from argument, or default from config)
    if args.priority:
        priority = args.priority
    else:
        priority = config['default']['priority']

    # Perform request
    resp = doRequest(url, token, title, message, priority)

    # Print request result only if it fails
    if resp.status_code is not requests.codes.ok:
        sys.exit(bytes.decode(resp.content))

def loadConfig(configFile):
    if os.path.isfile(configFile):
        file = open(configFile, 'r')
        yamlString = file.read()
        file.close()
    else:
        sys.exit('Could not load config: ' + path)

    return yaml.load(yamlString)

def loadDefaultConfig():
    HOME = os.path.expanduser('~')
    configFileLocations = [
            '/etc/' + APP_NAME + '/' + CONFIG_NAME + '.yml',
            '/etc/' + APP_NAME + '/' + CONFIG_NAME + '.yaml',
            HOME + '/.' + APP_NAME + '/' + CONFIG_NAME + '.yml',
            HOME + '/.' + APP_NAME + '/' + CONFIG_NAME + '.yaml',
            HOME + '/.config/' + APP_NAME + '/' + CONFIG_NAME + '.yml',
            HOME + '/.config/' + APP_NAME + '/' + CONFIG_NAME + '.yaml',
            HOME + '.' + CONFIG_NAME + '.yml',
            HOME + '.' + CONFIG_NAME + '.yaml',
            './' + CONFIG_NAME + '.yml',
            './' + CONFIG_NAME + '.yaml'
    ]

    configLoaded = False

    # Load config files in array order (multiple configs will override each other)
    for configFile in configFileLocations:
        if os.path.isfile(configFile):
            file = open(configFile, 'r')
            yamlString = file.read()
            file.close()
            configLoaded = True

    # Exit with error if no config was loaded
    if not configLoaded:
        sys.exit('No config file found!')

    return yaml.load(yamlString)

def loadTokenFromKey(config, key):
    # Lookup if key exists in token Map
    if config['tokenMap'] is not None and key in config['tokenMap']:
        return config['tokenMap'][key]
    else:
        sys.exit('No such key found in config: ' + key)

def doRequest(url, token, title, message, priority):
    requestURL = urljoin(url, '/message?token=' + token)
    resp = requests.post(requestURL, json={
        'title': title,
        'message': message,
        'priority': priority
    })
    return resp

if __name__ == "__main__":
    main()
